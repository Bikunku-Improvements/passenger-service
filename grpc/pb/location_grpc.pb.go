// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: grpc/pb/location.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Location_SubscribeLocation_FullMethodName = "/proto.Location/SubscribeLocation"
)

// LocationClient is the client API for Location service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationClient interface {
	SubscribeLocation(ctx context.Context, in *SubscribeLocationRequest, opts ...grpc.CallOption) (Location_SubscribeLocationClient, error)
}

type locationClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationClient(cc grpc.ClientConnInterface) LocationClient {
	return &locationClient{cc}
}

func (c *locationClient) SubscribeLocation(ctx context.Context, in *SubscribeLocationRequest, opts ...grpc.CallOption) (Location_SubscribeLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Location_ServiceDesc.Streams[0], Location_SubscribeLocation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &locationSubscribeLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Location_SubscribeLocationClient interface {
	Recv() (*SubscribeLocationResponse, error)
	grpc.ClientStream
}

type locationSubscribeLocationClient struct {
	grpc.ClientStream
}

func (x *locationSubscribeLocationClient) Recv() (*SubscribeLocationResponse, error) {
	m := new(SubscribeLocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocationServer is the server API for Location service.
// All implementations must embed UnimplementedLocationServer
// for forward compatibility
type LocationServer interface {
	SubscribeLocation(*SubscribeLocationRequest, Location_SubscribeLocationServer) error
	mustEmbedUnimplementedLocationServer()
}

// UnimplementedLocationServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServer struct {
}

func (UnimplementedLocationServer) SubscribeLocation(*SubscribeLocationRequest, Location_SubscribeLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLocation not implemented")
}
func (UnimplementedLocationServer) mustEmbedUnimplementedLocationServer() {}

// UnsafeLocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServer will
// result in compilation errors.
type UnsafeLocationServer interface {
	mustEmbedUnimplementedLocationServer()
}

func RegisterLocationServer(s grpc.ServiceRegistrar, srv LocationServer) {
	s.RegisterService(&Location_ServiceDesc, srv)
}

func _Location_SubscribeLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationServer).SubscribeLocation(m, &locationSubscribeLocationServer{stream})
}

type Location_SubscribeLocationServer interface {
	Send(*SubscribeLocationResponse) error
	grpc.ServerStream
}

type locationSubscribeLocationServer struct {
	grpc.ServerStream
}

func (x *locationSubscribeLocationServer) Send(m *SubscribeLocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Location_ServiceDesc is the grpc.ServiceDesc for Location service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Location_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Location",
	HandlerType: (*LocationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLocation",
			Handler:       _Location_SubscribeLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/pb/location.proto",
}
